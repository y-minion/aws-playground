name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js and Cache
        uses: actions/setup-node@v6
        with:
          node-version: "22"
          # npm install 속도 향상을 위한 캐시 (Optional)
          cache: "npm"

      - name: Install Dependencies & Build Project
        run: |
          npm install
          npm run build
          ls -al

      # 🚨 핵심: 빌드 결과물을 압축 파일 하나로 묶기
      - name: Compress Build Artifacts
        run: |
          tar -czf artifact.tar.gz \
            .next \
            package.json \
            package-lock.json

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Supabase-Next.js-artifact #Supabase-Next.js-artifact이름으로 압축 업로드
          path: artifact.tar.gz

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # - name: Setup Known Hosts
      #   run: |
      #     mkdir -p ~/.ssh
      #     echo "${{ secrets.KNOWN_HOSTS }}" > ~/.ssh/known_hosts
      #     chmod 644 ~/.ssh/known_hosts
      - name: Download Compressed Artifact
        uses: actions/download-artifact@v4
        with:
          name: Supabase-Next.js-artifact # 다운받을 아티팩트 지정

      - name: Transfer Artifacts to EC2 via SCP
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}

          source: "./artifact.tar.gz"
          target: "~/aws-playground"

      - name: Restart Service via SSH
        uses: appleboy/ssh-action@v1
        with:
          # 1. 접속 정보
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 30m

          # 2. 원격 실행 스크립트
          script: |
            set -x # 모든 명령어 실행 전후를 상세히 로깅

            NVM_BIN_PATH="/home/ubuntu/.nvm/versions/node/v22.20.0/bin"
            export PATH="$NVM_BIN_PATH:$PATH"

            echo "--- 1. Directory Change ---"
            cd ~/aws-playground || exit 1

            # 🚨 1. (디버깅) sar 명령을 통해 2초마다 15번 메모리 상태를 백그라운드에 기록
            # 이 기록이 npm ci 실행 시간대와 겹치게 됩니다.
            sar -r -n DEV -o ~/sar_history.log 2 15 & 
            SAR_PID=$!


            # 🚨 핵심: 전송된 압축 파일을 해제
            tar -xzf artifact.tar.gz

            echo "--- 2. NPM INSTALL START ---"
            npm ci # 🌟 npm ci로 변경 권장



            # 🚨 2. npm ci 완료 후 sar 프로세스 종료 및 로그 파일 확인
            kill $SAR_PID || true

            echo "--- SAR LOG (MEMORY/SWAP) ---"
            sar -r -f ~/sar_history.log # 메모리/스와프 사용량 출력
            sar -d -f ~/sar_history.log # 디스크 I/O (선택적)

            echo "--- 3. NPM INSTALL FINISHED ---" # 이 메시지가 출력되는지 확인
            pm2 describe test-app > /dev/null 2>&1

            if [ $? -ne 0 ]; then
              echo "Service not found. Starting PM2 for the first time..."
              pm2 start npm --name 'test-app' -- start
            else
              echo "Service found. Reloading..."
              pm2 reload test-app
            fi

            set +x
            exit 0
